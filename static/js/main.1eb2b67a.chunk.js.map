{"version":3,"sources":["markdown.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_MARKDOWN","marked","setOptions","gfm","breaks","App","props","state","markdown","handleChange","bind","event","this","setState","target","value","Container","fluid","Header","Row","Col","lg","React","Component","Navbar","dark","color","NavbarBrand","href","className","EditorPane","Input","type","name","id","onChange","PreviewPane","createHTML","__html","DOMPurify","sanitize","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oaAgDeA,EAhDO,g7BCQtBC,IAAOC,WAAW,CAChBC,KAAK,EACLC,QAAQ,I,IAGJC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,SAAUR,GAGZ,EAAKS,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,0EAUNC,GACXC,KAAKC,SAAS,CAAEL,SAAUG,EAAMG,OAAOC,U,+BAIvC,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CACEb,SAAUI,KAAKL,MAAMC,SACrBC,aAAcG,KAAKH,gBAGvB,kBAACW,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CAAab,SAAUI,KAAKL,MAAMC,kB,GA5B5Bc,IAAMC,WAoCxB,SAASL,IACP,OACE,kBAACM,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,QACjB,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAKC,UAAU,WAAjC,uBAON,IAAMC,EAAa,SAAAxB,GACjB,OACE,yBAAKuB,UAAU,QACb,yBAAKA,UAAU,cAAf,SACA,kBAACE,EAAA,EAAD,CACEC,KAAK,WACLC,KAAK,SACLC,GAAG,SACHnB,MAAOT,EAAME,SACb2B,SAAU7B,EAAMG,iBAMlB2B,E,YACJ,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KACD+B,WAAa,EAAKA,WAAW3B,KAAhB,gBAFD,E,0EAOjB,MAAO,CAAE4B,OAAQrC,IAAOsC,IAAUC,SAAS5B,KAAKN,MAAME,c,+BAItD,OACE,yBAAKqB,UAAU,QACb,yBAAKA,UAAU,cAAf,WACA,yBAAKK,GAAG,UAAUO,wBAAyB7B,KAAKyB,oB,GAf9Bf,IAAMC,WAqBjBlB,ICnFKqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1eb2b67a.chunk.js","sourcesContent":["const INITIAL_MARKDOWN = `\r\n# Sample Markdown\r\n\r\n## Bold and Italic\r\nThere are two ways to bold text, surround the text with two **asterisks** or __underscores__.\r\nSimilarly, you can italicize by surrounding the text with a single *asterisk* or _underscore_.\r\n\r\n## Hyperlinks\r\n[Link Title](http://www.example.com)\r\n\r\n## Lists\r\n\r\nUnordered list items start with '-' or '+':\r\n+ Item 1\r\n- Item 2\r\n- Item 3\r\n\r\nOrdered lists start with a number followed by a period:\r\n1. First item\r\n2. Second item\r\n3. Third item\r\n\r\n## Code\r\nUse single backtics for \\`inline code\\`\r\n\r\nSurround code blocks with three backtics on their own line:\r\n\\`\\`\\`\r\necho 'Hello World'\r\n\\`\\`\\` \r\n\r\n## Block Quote\r\n\r\nTo make a block quote, start each line with '> ':\r\n> Here is how you do a block quote\r\n> Block quote line 2\r\n\r\n## Images\r\n![Alt Text](https://www.markdownguide.org/assets/images/tux.png \"Image Title\")\r\n\r\n# Heading Level 1\r\n\r\n## Heading Level 2\r\n\r\n### Heading Level 3\r\n\r\n#### Heading Level 4\r\n`;\r\n\r\nexport default INITIAL_MARKDOWN;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport marked from \"marked\";\nimport ReactFCCTest from \"react-fcctest\";\nimport DOMPurify from \"dompurify\"; // used to clean user input and prevent XSS attacks\nimport { Container, Row, Col, Navbar, NavbarBrand, Input } from \"reactstrap\";\nimport INITIAL_MARKDOWN from \"./markdown\"; // sample markdown initially loaded in editor\n\nmarked.setOptions({\n  gfm: true,\n  breaks: true\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markdown: INITIAL_MARKDOWN\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ markdown: event.target.value });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <ReactFCCTest />\n        <Header />\n        <Row>\n          <Col lg=\"6\">\n            <EditorPane\n              markdown={this.state.markdown}\n              handleChange={this.handleChange}\n            />\n          </Col>\n          <Col lg=\"6\">\n            <PreviewPane markdown={this.state.markdown} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nfunction Header() {\n  return (\n    <Navbar dark color=\"dark\">\n      <NavbarBrand href=\"#'\" className=\"mx-auto\">\n        Markdown Previewer\n      </NavbarBrand>\n    </Navbar>\n  );\n}\n\nconst EditorPane = props => {\n  return (\n    <div className=\"pane\">\n      <div className=\"pane-title\">Input</div>\n      <Input\n        type=\"textarea\"\n        name=\"editor\"\n        id=\"editor\"\n        value={props.markdown}\n        onChange={props.handleChange}\n      ></Input>\n    </div>\n  );\n};\n\nclass PreviewPane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createHTML = this.createHTML.bind(this);\n  }\n\n  // takes markdown and provides sanitized HTML for dangerouslySetInnerHTML\n  createHTML() {\n    return { __html: marked(DOMPurify.sanitize(this.props.markdown)) };\n  }\n\n  render() {\n    return (\n      <div className=\"pane\">\n        <div className=\"pane-title\">Preview</div>\n        <div id=\"preview\" dangerouslySetInnerHTML={this.createHTML()}></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}